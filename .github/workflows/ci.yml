name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  linting:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install snakemake flake8 black

    - name: Lint Python scripts with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 workflow/scripts --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 workflow/scripts --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics

    - name: Check Python code formatting with black
      run: |
        black --check workflow/scripts || echo "::warning::Python code needs formatting. Run 'black workflow/scripts' locally."

    - name: Lint Snakefile
      run: |
        snakemake --lint

  dry-run:
    runs-on: ubuntu-latest
    needs: linting
    steps:
    - uses: actions/checkout@v4

    - name: Setup Mambaforge
      uses: conda-incubator/setup-miniconda@v3
      with:
        miniforge-variant: Mambaforge
        miniforge-version: latest
        activate-environment: snakemake
        use-mamba: true

    - name: Install Snakemake
      shell: bash -l {0}
      run: |
        mamba install -c conda-forge -c bioconda snakemake

    - name: Create test config
      run: |
        # Create minimal test configuration
        mkdir -p data/raw resources
        cat > config/test_config.yaml << 'EOF'
        output_dir: "test_results"
        quality_threshold: 20
        min_read_length: 100

        references:
          phix: "resources/phix174.fasta"
          host_genome: "resources/host_genome.fasta"
          rrna: "resources/rrna.fasta"

        samples:
          test_sample:
            r1: "data/raw/test_R1.fastq.gz"
            r2: "data/raw/test_R2.fastq.gz"

        qc_thresholds:
          min_enrichment_score: 10
          max_host_percent: 10
          max_rrna_percent: 20
          min_final_reads: 100000
        EOF

    - name: Snakemake dry-run
      shell: bash -l {0}
      run: |
        # Dry run to check workflow syntax
        snakemake --configfile config/test_config.yaml --use-conda -n

  validation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Validate YAML files
      run: |
        python -c "import yaml; yaml.safe_load(open('config/config.yaml'))"
        python -c "import yaml; yaml.safe_load(open('workflow/envs/qc.yaml'))"
        python -c "import yaml; yaml.safe_load(open('workflow/envs/bbtools.yaml'))"
        python -c "import yaml; yaml.safe_load(open('workflow/envs/mapping.yaml'))"
        python -c "import yaml; yaml.safe_load(open('workflow/envs/viromeqc.yaml'))"

    - name: Check for required files
      run: |
        test -f README.md
        test -f CONTRIBUTING.md
        test -f CODE_OF_CONDUCT.md
        test -f LICENSE
        test -f workflow/Snakefile
        test -f config/config.yaml
        test -f workflow/scripts/generate_qc_flags.py

    - name: Validate Python syntax
      run: |
        python -m py_compile workflow/scripts/generate_qc_flags.py

  documentation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Check links in README
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        config-file: '.github/markdown-link-check-config.json'
        continue-on-error: true

    - name: Check for TODO/FIXME comments
      run: |
        echo "Checking for unresolved TODOs and FIXMEs..."
        grep -r "TODO\|FIXME" workflow/ config/ --exclude-dir=.snakemake || echo "No TODOs or FIXMEs found"
